package com.kristofergilluley.tankhell;


import android.annotation.SuppressLint;
import android.content.Context;
import android.content.res.AssetFileDescriptor;
import android.content.res.AssetManager;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import java.io.Serializable;
import android.graphics.Rect;
import android.graphics.RectF;
import android.media.AudioManager;
import android.media.SoundPool;
import android.net.Uri;
import android.util.Log;
import android.view.MotionEvent;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.util.Log;
import android.widget.TextView;
import android.media.MediaPlayer;

import java.io.IOException;
import java.util.Random;

public class TankWarView extends SurfaceView implements Runnable {

    //data declarations
    private Context context;
    private Thread gameThread = null;
    private SurfaceHolder ourHolder;
    private volatile boolean playing;
    private boolean paused = true;
    private boolean gamestart=false;
    private Canvas canvas;
    private Canvas canvas2;
    private Paint paint;
    private long fps;
    private long timeThisFrame;
    private int screenX;
    private int screenY;
    private int score = 0;
    private int lives = 5;
    private int tankRandomDir;
    private Bitmap bit = BitmapFactory.decodeResource(getResources(),R.drawable.tankdown);
    float float1=0,float2=0;
    Random random = new Random();
    private Tank tank,tank2,tank3;
    private Bullet bullet,bullet2,bullet3,badBullet;
    private int bulletDirection, bulletsFired=0;
    private String bullet1status="Ready",bullet2status="Ready",bullet3status="Ready";


    public TankWarView(Context context, int x, int y)
    {
        super(context);
        this.context = context;
        ourHolder = getHolder();
        paint = new Paint();
        screenX = x;
        screenY = y;
        initLevel();
        run();
    }

    private void initLevel()
    {
        tank = new Tank(context,screenX,screenY,screenX,screenY,350);
        tank2 = new Tank(context,screenX,screenY,screenX/2,screenY/2,175);
        bullet=new Bullet(screenX/15,screenX/15);
        bullet2=new Bullet(screenX/15,screenX/15);
        bullet3=new Bullet(screenX/15,screenX/15);
        badBullet=new Bullet(screenX/15,screenX/15);
    }

    @Override
    public void run() {
        while (playing)
        {
            long startFrameTime = System.currentTimeMillis();
            if(!paused){
                update(fps);
            }
            badTankUpdate(fps);
            movingBullet(fps);
            draw();
            moveEnemyTank(tank2);

            timeThisFrame = System.currentTimeMillis() - startFrameTime;
            if (timeThisFrame >= 1) {
                fps = 1000 / timeThisFrame;
            }
        }
    }
    private void update(long fps)
    {
        tank.update(fps);
        Log.d("Tag",String.valueOf(tank.getState()));

        checkCollisions(tank,tank2);
    }
    private void badTankUpdate(long fps)
    {
        if(gamestart==true){
            tank2.update(fps);
        }
        bulletShoot(badBullet,tank2);

        if(checkCollisions(tank2,tank)==true)
        {
            tank2 = new Tank(context,screenX,screenY,screenX,screenY,175);
            //look for random number
            tankRandomDir=random.nextInt(6)+1;//changes the direction the tank will move in when spawned
        };
    }
    private boolean checkCollisions(Tank tank, Tank tank2)//check if tanks are hitting or bullets hitting or whatver
    {
        //code if for tanks crashing into the sides of the screen
        if(tank.getX()<=0)
        {
            tank.setX(tank.getX()+20);
            return true;
        }

        if ((tank.getX()+tank.getLength())>screenX)
        {
            tank.setX(tank.getX()-20);
            return true;
        }
        if(tank.getY()<=0-(tank.getHeight()/2))
        {
            tank.setY(screenY);
            return true;
        }
        if(tank.getY()>=screenY-(tank.getHeight()-20))
        {
            // tank.setY(tank.getY()-50);
            tank.setY(0);
            return true;
        }

        if(RectF.intersects(tank.getRect(),tank2.getRect()))
        {
            if(tank.getState()==tank.UP)
            {
                tank.setY(tank.getY()+30);
                tank2.setY(tank2.getY()-30);
            }
            if(tank.getState()==tank.DOWN)
            {
                tank.setY(tank.getY()-30);
                tank2.setY(tank2.getY()+30);
            }
            if(tank.getState()==tank.RIGHT)
            {
                tank.setX(tank.getX()-30);
                tank2.setX(tank2.getX()+30);
            }
            if(tank.getState()==tank.LEFT)
            {
                tank.setX(tank.getX()+30);
                tank2.setX(tank2.getX()-30);
            }
        }
        return false;
    }
    private void movingBullet(long fps)
    {
        if(checkBulletCollisions(bullet, tank2)==true)
            bullet1status="Ready";

        if(checkBulletCollisions(bullet2,tank2)==true)
            bullet2status="Ready";
        if(checkBulletCollisions(bullet3,tank2)==true)
            bullet3status="Ready";
        if(bullet.getStatus())
            bullet.update(fps);
        if(bullet2.getStatus())
            bullet2.update(fps);
        if(bullet3.getStatus())
            bullet3.update(fps);
        if(badBullet.getStatus())
            badBullet.update(fps);
    }

    private boolean checkBulletCollisions(Bullet bull, Tank tank)
    {
        if ((bull.getImpactPointY() > screenY) || (bull.getImpactPointY() < 0) ||(bull.getImpactPointX() < 0)
                || (bull.getImpactPointX() > screenX))
        {
            bull.setInactive();
            return true;
        }
        if (bull.getStatus()) {
            if (RectF.intersects(bull.getRect(), tank2.getRect())) {
                bull.setInactive();
                tank2 = new Tank(context,screenX,screenY,screenX/2,screenY/2,175);
                score = score + 10;
                tankRandomDir=random.nextInt(6)+1;
                return true;
            }
        }
        return false;
    }


    private void draw()
    {
        if (ourHolder.getSurface().isValid()) {

            canvas = ourHolder.lockCanvas();
            canvas.drawColor(Color.argb(255, 26, 128, 182));//draws background
            paint.setColor(Color.argb(255,  255, 255, 255));
            canvas.drawBitmap(tank.getBitmap(),tank.getX(),tank.getY(),paint);
            canvas.drawBitmap(tank2.getBitmap(),tank2.getX(),tank2.getY(),paint);
            //draw the bullet if active
            if(bullet.getStatus()){
                canvas.drawRect(bullet.getRect(), paint);
            }
            if(bullet2.getStatus())
            {
                canvas.drawRect(bullet2.getRect(),paint);
            }
            if(bullet3.getStatus())
            {
                canvas.drawRect(bullet3.getRect(),paint);
            }
            if(badBullet.getStatus())
            {
                canvas.drawRect(badBullet.getRect(),paint);
            }
            paint.setColor(Color.argb(255,  249, 129, 0));
            paint.setTextSize(100);
            canvas.drawText("Score: " + score + "   Lives: " + lives, 10,100, paint);
            paint.setColor(Color.argb(255,  0, 0, 0));
            paint.setTextSize(50);
            canvas.drawText("Bullet 1: " + bullet1status ,10,175,paint);
            canvas.drawText("Bullet 2: " + bullet2status ,10,250,paint);
            canvas.drawText("Bullet 3: " + bullet3status ,10,325,paint);

            ourHolder.unlockCanvasAndPost(canvas);
        }
    }

    public void pause() {
        playing = false;
        try {
            gameThread.join();
        } catch (InterruptedException e) {
            Log.e("Error:", "joining thread");
        }
    }

    public void resume() {
        playing = true;
        gameThread = new Thread(this);
        gameThread.start();
    }

    public void moveEnemyTank(Tank tank)
    {
        tank.setMovementState(tankRandomDir);
        bulletShoot(badBullet,tank2);
    }
    @Override
    public boolean onTouchEvent(MotionEvent motionEvent)
    {
        switch (motionEvent.getAction() & MotionEvent.ACTION_MASK)
        {
            case MotionEvent.ACTION_DOWN://left:1,right:2,up:3,down:4
                paused=false;
                gamestart=true;
                /*Below is the code to move the tank and to fire the shells
                 * it's written so that the direction will be based on where the tank is located on screen
                 * e.g. touch below the tank and it'll move down, touch up and to the right of the tank it'll go up and right
                 * */
                if(motionEvent.getX()<tank.getX())//left
                {
                    if(motionEvent.getY()<tank.getY())//up
                    {
                        tank.setMovementState(tank.UPLEFT);
                        Log.d("Dag","Up and Left");
                        bulletDirection=4;
                        break;
                    }
                    else if(motionEvent.getY()>tank.getY()+(tank.getX()/2))// down
                    {
                        tank.setMovementState(tank.DOWNLEFT);
                        Log.d("Dag","Down and Left");
                        bulletDirection=6;
                        break;
                    }
                    else
                    {
                        tank.setMovementState(tank.LEFT);//left
                        bulletDirection=3;
                        break;
                    }
                }
                if(motionEvent.getX()>tank.getX()+tank.getLength())//right
                {
                    if(motionEvent.getY()<tank.getY())//up
                    {
                        tank.setMovementState(tank.UPRIGHT);
                        bulletDirection=5;
                        Log.d("Dag","Up and Right");
                        break;
                    }
                    else if(motionEvent.getY()>tank.getY()+(tank.getX()/2))// down
                    {
                        tank.setMovementState(tank.DOWNRIGHT);
                        bulletDirection=7;
                        Log.d("Dag","Down and Right");
                        break;
                    }
                    else {
                        tank.setMovementState(tank.RIGHT);
                        bulletDirection=2;
                        break;
                    }
                }
                if(motionEvent.getY()<tank.getY())
                {
                    tank.setMovementState(tank.UP);
                    bulletDirection=0;
                    break;
                }
                if(motionEvent.getY()>tank.getY()+(tank.getX()/2))
                {
                    tank.setMovementState(tank.DOWN);
                    bulletDirection=1;

                    break;
                }
                if(motionEvent.getX()>tank.getX() && motionEvent.getX()<tank.getX()+tank.getLength()
                        && motionEvent.getY()>tank.getY() && motionEvent.getY()<tank.getY()+tank.getHeight())
                {
                    if(bulletsFired==0)
                    {
                        bulletShoot(bullet,tank);
                        bullet1status="Reloading...";
 